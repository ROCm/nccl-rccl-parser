1. rccl_nccl_parser.py
# TODO: consider the case when MP = DP
     ==>  output: net_counts_MP.csv, net_counts_DP.csv, net_unique_DP.sh, net_unique_MP.sh, device_groups.txt (if not perf-optim mode)*
     ==>  output: net_counts.csv, net_unique.csv (when DP = MP, since we cannot know what operations are for MP or DP.)
     
     
2 define_search_space.py
"""
The purpose of this script is to define search space for topology-aware optimization
1. HIP_VISIBLE_DEVICES (default search space)
2. NUMA binding
3. rccl env var?
4. ...


We first read "deviceIdMapping/busId_HIP_map.txt"


3. run_parser_and_generatje_summary.py       
===>  (mode 1) use the specified device grouping to output results 
<workflow>:
rccl_nccl_parser.py ("perf optim mode"=="tunning mode") --> generatje_summary.py  
                                                     | ---> device_groups.txt
                                                       
===>  (mode 2) use the search space defined in "define_search_space.py" to run rccl-tests/nccl-tests and find the optimal set.
<workflow>:
define_search_space.py --> rccl_nccl_parser.py ("perf optim mode"=="tunning mode") --> generatje_summary.py  




